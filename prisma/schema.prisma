generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String  @id @unique @default(uuid())
  name          String  @unique @db.VarChar(100)
  email         String  @unique @db.VarChar(100)
  emailVerified Boolean @default(false) @db.Boolean

  password        String?  @db.VarChar(100)
  avatar          String?
  avatarChangedAt DateTime @default(now())
  description     String   @default("") @db.Text
  isAdmin         Boolean  @default(false) @db.Boolean

  provider  String @default("EMAIL")
  github_id String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions Session[]
  links    UserLinks[]
  products Product[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Product {
  id          String         @id @unique @default(uuid())
  name        String         @unique @db.VarChar(255)
  slug        String         @unique @db.VarChar(255)
  price       Float          @db.Real
  description String         @default("") @db.Text
  likes       Int            @default(0) @db.SmallInt
  rating      Float          @default(0) @db.Real
  quantity    Int            @default(0) @db.SmallInt
  sold        Int            @default(0) @db.SmallInt
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  images      ProductImage[]
  User        User           @relation(fields: [userId], references: [id])
  userId      String
}

enum Provider {
  GITHUB
  EMAIL
}

model UserLinks {
  id        String   @id @unique @default(uuid())
  link      String   @db.Text
  provider  Provider
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
}

model ProductImage {
  id        String  @id @unique @default(uuid())
  link      String  @db.Text
  productId String
  Product   Product @relation(fields: [productId], references: [id])
}

enum LinkProviders {
  GOOGLE
  FACEBOOK
  INSTAGRAM
  WHATS_UP
  APPLE
  ALI_BABA
  ALI_EXPRESS
  TWITTER
  GITHUB
  PERSONAL
}
