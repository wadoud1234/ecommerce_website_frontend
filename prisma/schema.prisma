generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String  @id @unique @default(uuid())
  slug          String  @unique
  searchText    String
  name          String  @unique @db.VarChar(100)
  email         String  @unique @db.VarChar(100)
  emailVerified Boolean @default(false) @db.Boolean

  password    String?
  avatar      String?
  description String  @default("") @db.Text
  isAdmin     Boolean @default(false) @db.Boolean

  provider  Provider @default(EMAIL)
  github_id String   @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions Session[]
  links    UserLink[]
  products Product[]

  cart   Cart?
  orders Order[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Product {
  id          String   @id @unique @default(uuid())
  name        String   @unique @db.VarChar(255)
  slug        String   @unique @db.VarChar(255)
  price       Float
  searchText  String
  description String   @default("") @db.Text
  likes       Int      @default(0)
  rating      Float    @default(0) @db.Real
  quantity    Int      @default(0)
  sold        Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  mainImage       String
  secondaryImages ProductImage[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  carts CartItem[]

  OrderItem OrderItem[]
}

enum Provider {
  GITHUB
  EMAIL
}

model UserLink {
  id        String   @id @unique @default(uuid())
  link      String   @db.Text
  provider  Provider
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
}

model ProductImage {
  id        String  @id @unique @default(uuid())
  link      String  @db.Text
  productId String
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id       String    @id @unique @default(uuid())
  name     String    @unique
  slug     String    @unique
  products Product[]
}

enum LinkProviders {
  GOOGLE
  FACEBOOK
  INSTAGRAM
  WHATS_UP
  APPLE
  ALI_BABA
  ALI_EXPRESS
  TWITTER
  GITHUB
  PERSONAL
}

model Cart {
  id     String @id @unique @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  CartItems CartItem[]
}

model CartItem {
  id String @id @unique @default(uuid())

  addedAt DateTime @default(now())

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int

  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@unique([productId, cartId])
}

model OrderItem {
  id        String   @id @unique @default(uuid())
  products  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())

  orders  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String
}

model Order {
  id String @id @unique @default(uuid())

  OrderItem OrderItem[]

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}
